// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------enum part ------------------//

enum AtributeDateType {
  STRING
  DATE_TIME
  DOUBLE
  INT
}

enum CompanyRole {
  ADMIN
  EMPLOYEE
  DEPARTMENT_HEAD
  LOGESTIC_SUPERVISER
  FINANCE
  GENERAL_MANAGER
  STORE_KEEPER
}

enum Gender {
  MALE
  FEMALE
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum StoreInventoryType {
  IN
  OUT

}

enum MaterialRequestStatus{
  REQUESTED
  HEPARTMENT_APROVED
  HEPARTMENT_REJECT
  AVALILABLE_INSTOKE
  PURCHASE_REQUESTED
  PURCHASE_ORDERED
  DELIVERD_STATE
}
enum PurchasedRequestStatus{
  REQUESTED
  FINANCE_APPROVE
  FINANCE_REJECT
  GENERAL_MANAGER_APPROVED
  GENERAL_MANAGER_REJECT
}
enum PurchasedOrderStatus{
  ORDERED
  CLOSED
}
// -----x------enum part ----------x--------//

// -----------model part ------------------//

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  //relation
  users     Users[]
}

model SupplierCategory {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  //relation
  supplier  Suppliers[]
}

model ProductCategory {
  id          Int                  @id @default(autoincrement())
  name        String
  createdAt   DateTime             @default(now())
  // relation
  subCategory ProductSubCategory[]
}

model ProductSubCategory {
  id         Int             @id @default(autoincrement())
  categoryId Int
  name       String
  createdAt  DateTime        @default(now())
  // refrence
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  // relation
  products   Product[]
}

model Template {
  id         Int                 @id @default(autoincrement())
  name       String
  createdAt  DateTime            @default(now())
  //  relation
  attributes TemplateAttribute[]
}

model TemplateAttribute {
  id               Int                @id @default(autoincrement())
  templateId       Int
  name             String
  dataType         AtributeDateType //can be string also
  // references 
  template         Template           @relation(fields: [templateId], references: [id])
  //relation
  productAttribute ProductAttribute[]
}

model Product {
  id                     Int                      @id @default(autoincrement())
  subcategoryId          Int
  name                   String
  createdAt              DateTime                 @default(now())
  // references
  subcategory            ProductSubCategory       @relation(fields: [subcategoryId], references: [id])
  // relation
  productAttributes      ProductAttribute[]
  storeInventory         StoreInventory[]
  materialRequestItem    MaterialRequestItem[]
  purceasedRequestedItem PurceasedRequestedItem[]
  purchasedOrderItem PurchasedOrderItem[]        

  OfferItem OfferItem[]
  GRNItem GRNItem[]
}

model ProductAttribute {
  id                  Int     @id @default(autoincrement())
  productId           Int
  templateAttributeId Int
  value               String
  // references
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  templateAttribute TemplateAttribute @relation(fields: [templateAttributeId], references: [id])

  MaterialRequestItem MaterialRequestItem[]
  purceasedRequestedItem PurceasedRequestedItem[]
  purchasedOrderItem PurchasedOrderItem[]
  offerItem OfferItem[]
  GRNItem GRNItem[]
}

model Address {
  id        Int         @id @default(autoincrement())
  country   String      @default("Ethiopia")
  city      String
  subCity   String
  wereda    String
  createdAt DateTime    @default(now())
  //  relation 
  profile   Profile[]
  suppliers Suppliers[]
  store     Store[]
}

model Users {
  id                                 Int                @id @default(autoincrement())
  email                              String             @unique
  activeStatus                       ActiveStatus
  role                               CompanyRole        @default(EMPLOYEE)
  createdAt                          DateTime           @default(now())
  departmentId                        Int
  //reference
  department                         Department         @relation(fields: [departmentId], references: [id])
  // relation
  password                           Password?
  profile                            Profile?
  departmentHeadedMaterialRequests   MaterialRequest[]  @relation("departmentHeadedMaterialRequests")
  logisticSupervisedMaterialRequests MaterialRequest[]  @relation("logisticSupervisedMaterialRequests")
  employedMaterialRequests           MaterialRequest[]  @relation("employedMaterialRequests")
  storeinventory                     StoreInventory[]
  GRN                                GRN[]
  PurchasedRequest                   PurchasedRequest[]
  PurchasedOrder                     PurchasedOrder[]
  Winner                             Winner[]
}

model Password {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  password  String
  createdAt DateTime @default(now())
  //references
  user      Users    @relation(fields: [userId], references: [id])
}

model Profile {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  firstName  String
  lastName   String
  middleName String
  gender     Gender  @default(MALE)
  phone      String  @unique
  imgUrl     String?
  addressId  Int
  //references
  user       Users   @relation(fields: [userId], references: [id])
  address    Address @relation(fields: [addressId], references: [id])
}

model Suppliers {
  id             Int              @id @default(autoincrement())
  categoryId     Int
  fullName       String
  phone          String           @unique
  email          String           @unique
  addressId      Int
  createdAt      DateTime         @default(now())
  //references
  category       SupplierCategory @relation(fields: [categoryId], references: [id])
  address        Address          @relation(fields: [addressId], references: [id])
  // relation
  winner         Winner[]
  grn            GRN[]
  SupplayerOffer SupplayerOffer[]
}

// -- store model -- //
model Store {
  id             Int              @id @default(autoincrement())
  name           String
  addressId      Int
  createdAt      DateTime         @default(now())
  // references
  address        Address          @relation(fields: [addressId], references: [id])
  // relation
  storeInventory StoreInventory[]
}

model StoreInventory {
  id              Int                @id @default(autoincrement())
  storId          Int
  userId          Int
  productId       Int
  quantity        Int
  currentQuantity Int
  type            StoreInventoryType
  createdAt       DateTime           @default(now())
  //refrences
  product         Product            @relation(fields: [productId], references: [id])
  user            Users              @relation(fields: [userId], references: [id])
  store           Store              @relation(fields: [storId], references: [id])
}

model MaterialRequest {
  id                   Int      @id @default(autoincrement())
  requesterId          Int
  departmentHeadId     Int
  logisticSuperViserId Int?
  createdAt            DateTime @default(now())
  isApproviedByDH      Boolean  @default(false)
  isAvalableInInStoke  Boolean  @default(false)
  status      MaterialRequestStatus @default(REQUESTED)
  //refernces
  employee               Users                    @relation(fields: [requesterId], references: [id], name: "employedMaterialRequests")
  departmentHead         Users                    @relation(fields: [departmentHeadId], references: [id], name: "departmentHeadedMaterialRequests")
  logisticSupervisor     Users?                   @relation(fields: [logisticSuperViserId], references: [id], name: "logisticSupervisedMaterialRequests")
  // relation
  items                  MaterialRequestItem[]
  purchasedRequest     PurchasedRequest[]
}
 
model MaterialRequestItem {
  id                    Int                @id @default(autoincrement())
  materialRequestId     Int
  productId             Int 
  quantityRequested     Decimal
  remark                String
  //reference
  productAttributes     ProductAttribute[]
  materialRequest       MaterialRequest    @relation(fields: [materialRequestId], references: [id])
  product               Product            @relation(fields: [productId], references: [id])
}

model PurchasedRequest {
  id                   Int      @id @default(autoincrement())
  materialRequestId     Int
  userId               Int         
  createdAt            DateTime @default(now())
  isApproviedByGM      Boolean  @default(false)
  isApproviedByFinance Boolean  @default(false)
  totalPrice           Decimal  
  status       PurchasedRequestStatus @default(REQUESTED)
  // reference
  user                 Users    @relation(fields: [userId], references: [id])
  materialRequest      MaterialRequest @relation(fields: [materialRequestId],references: [id])
    // relation
  items PurceasedRequestedItem[] 
  purchasedOrder PurchasedOrder[]
}

model PurceasedRequestedItem {
  id                    Int                @id @default(autoincrement())
  productId             Int
  purchasedRequestId    Int
  remark                String
  unitPrice             Decimal
  quantityToBePurchased Decimal?
  //reference           
  purchasedRequest      PurchasedRequest    @relation(fields: [purchasedRequestId], references: [id])
  // relation
  products              Product  @relation(fields: [productId], references: [id])
   productAttributes     ProductAttribute[]
}

model PurchasedOrder {
  id        Int                  @id @default(autoincrement())
  userId    Int
  status    PurchasedOrderStatus @default(ORDERED)
  purchasedRequestId    Int
  createdAt DateTime             @default(now())
  // relation 
  user      Users                @relation(fields: [userId], references: [id])
  purchasedRequest      PurchasedRequest    @relation(fields: [purchasedRequestId], references: [id])

  items     PurchasedOrderItem[]
  SupplayerOffer SupplayerOffer[]
  grn GRN[]
  winner    Winner[]
}


model PurchasedOrderItem {
  id                    Int             @id @default(autoincrement())
  purchasOrderId        Int
  productId             Int
  quantityToBePurchased Decimal
  remark                String
  purchasedOrder        PurchasedOrder @relation(fields: [purchasOrderId], references: [id]) 
  products              Product @relation(fields: [productId], references: [id]) 
  productAttributes     ProductAttribute[]
}


model SupplayerOffer {
  id               Int            @id @default(autoincrement())
  purchasedOrderId Int
  supplayerId      Int
  totalPrice       Decimal
  createdAt        DateTime       @default(now())
  // reference
  purchasedOrder   PurchasedOrder @relation(fields: [purchasedOrderId], references: [id])
  supplayer        Suppliers      @relation(fields: [supplayerId], references: [id])
  // relation
  offerItem        OfferItem[]
}

model OfferItem {
  id               Int            @id @default(autoincrement())
  supplayerOfferId Int
  productId        Int
  quantity         Decimal
  unitPrice        Decimal
  supplayerOffer   SupplayerOffer @relation(fields: [supplayerOfferId], references: [id])
  // relation
  products              Product @relation(fields: [productId], references: [id]) // Relation to Product
  productAttributes     ProductAttribute[]
  
}

model Winner {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  supplayerId      Int
  purchasedOrderId Int
  userId           Int
  // reference
  purchasedOrder   PurchasedOrder @relation(fields: [purchasedOrderId], references: [id])
  supplayer        Suppliers      @relation(fields: [supplayerId], references: [id])
  user             Users          @relation(fields: [userId], references: [id])
}

model GRN {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  reciverId        Int
  supplayerId      Int
  purchasedOrderId Int
  user             Users          @relation(fields: [reciverId], references: [id])
  supplayer        Suppliers      @relation(fields: [supplayerId], references: [id])
  purchasedOrder   PurchasedOrder @relation(fields: [purchasedOrderId], references: [id])

  grnItem GRNItem[]
}

model GRNItem {
  id        Int    @id @default(autoincrement())
  productId Int
  quantity  Int
  remark    String
  grnId     Int
  //reference
  grn       GRN    @relation(fields: [grnId], references: [id])
  products              Product @relation(fields: [productId], references: [id]) // Relation to Product
  productAttributes     ProductAttribute[]
}

// ------x-----model part ---------x---------//
